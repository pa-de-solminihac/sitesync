#/bin/bash

source $(dirname $0)/etc/config

if [ $enable_gzip -gt 0 ];
then
    DO_GZIP="gzip"
    DO_GUNZIP="gunzip"
else
    DO_GZIP="cat"
    DO_GUNZIP="cat"
fi

# echappement des variables : caracteres '.' et '/'
curdate=`date +%Y%m%d%H%M%S`
local_hostname=`echo "$local_root_url"         | sed 's/\/.*//g'`
dist_root_url_escaped=`echo "$dist_root_url"   | sed 's/\//\\\\\//g'`
dist_hostname_escaped=`echo "$dist_hostname"   | sed 's/\//\\\\\//g'`
local_root_url_escaped=`echo "$local_root_url" | sed 's/\//\\\\\//g'`
local_hostname_escaped=`echo "$local_hostname" | sed 's/\//\\\\\//g'`
dist_root_fs_escaped=`echo "$dist_root_fs"     | sed 's/\//\\\\\//g'`
local_root_fs_escaped=`echo "$local_root_fs"   | sed 's/\//\\\\\//g'`
sqlfile="$(dirname $0)/tmp/$dist_dbname$curdate.sql"

# dump de la base distante à travers SSH
MSG="1/5 : dump de la base distante (tunnel SSH)";
echo -n "$MSG"
echo "DROP DATABASE IF EXISTS $local_dbname; CREATE DATABASE $local_dbname; USE $local_dbname; " > $sqlfile && \
    ssh $dist_unixuser@$server "($remote_path_to_mysqldump --opt -R --no-data $sql_options -u $dist_dbuser $dist_dbname && $remote_path_to_mysqldump --opt -R $sql_options $sql_ignores -u $dist_dbuser $dist_dbname) | $DO_GZIP" | $DO_GUNZIP \
        >> $sqlfile
let COL=70-${#MSG}
printf "%${COL}s\n" "OK"

# remplacement des URL et chemins (même sérialisés)
MSG="2/5 : remplacement des URL et chemins (meme serialises)";
echo -n "$MSG"
$local_path_to_php $local_path_to_resilient_replace -i "$dist_root_url_escaped" "$local_root_url" $sqlfile
$local_path_to_php $local_path_to_resilient_replace -i "$dist_root_fs_escaped" "$local_root_fs" $sqlfile
let COL=70-${#MSG}
printf "%${COL}s\n" "OK"

# adaptation spécifiques
MSG="3/5 : adaptations avant import (fichiers hook/before/*.sh)";
# applique les fichiers dans hook
echo -n "$MSG"

# teste s'il y a des fichiers .sh
shopt -q nullglob || resetnullglob=1; shopt -s nullglob;
files=(hook/before/*.sh); 
[ "$resetnullglob" ] && shopt -u nullglob
# s'il y a des fichiers .sh
if [ ${#files[@]} -gt 0 ];
then
    echo
    for fich in hook/before/*.sh; 
    do
        source $fich;
        let COL=70-${#MSG}
        printf "%${COL}s\n" "OK"
    done
else
    let COL=70-${#MSG}
    printf "%${COL}s\n" ".."
fi

# importe la BD modifiee
MSG="4/5 : import de la base de donnees"
echo -n "$MSG"
cat $sqlfile | \
    $local_path_to_mysql -u $local_dbuser $local_dbname --show-warnings > $logfile && \
    rm -f $sqlfile && \
    let COL=70-${#MSG} && \
    printf "%${COL}s\n" "OK"

MSG="5/5 : adaptations apres import (fichiers hook/after/*.sh)";
# applique les fichiers dans hook
echo -n "$MSG"
# teste s'il y a des fichiers .sh
shopt -q nullglob || resetnullglob=1; shopt -s nullglob;
files=(hook/after/*.sh); 
[ "$resetnullglob" ] && shopt -u nullglob
# s'il y a des fichiers .sh
if [ ${#files[@]} -gt 0 ];
then
    echo
    for fich in hook/after/*.sh; 
    do
        source $fich;
        let COL=70-${#MSG}
        printf "%${COL}s\n" "OK"
    done
else
    let COL=70-${#MSG}
    printf "%${COL}s\n" ".."
fi

