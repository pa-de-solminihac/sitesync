#!/usr/bin/env bash

#set -e -o pipefail -o errtrace -o functrace
#trap 'err_handler $?' ERR
#
#err_handler() {
#    trap - ERR
#    let i=0 exit_status=$1
#    echo -ne "\033[0;31m"
#    echo
#    echo "Aborting on error $exit_status:"
#    echo "--------------------"
#    while caller $i; do ((++i)); done
#    echo -ne "\033[0m"
#    exit $?
#}

# TODO: chercher-remplacer basés sur des tableaux utilisables pour les URL, les chemins, les noms d'hôtes...
# TODO: synchronisation de dossiers basée sur des tableaux
declare -a replace_src
declare -a replace_dst
declare -a sync_src
declare -a sync_dst

# valeurs par défaut
skip_sql=0
skip_files=0
path_to_sitesync="$(dirname "$0")"
pushd $path_to_sitesync >/dev/null
source inc/config-base

# allowed parameters
OPT_CONF="--conf"
OPT_SQL="sql"
OPT_FILES="files"

# usage
function usage() {
    cat <<EOF

    Synchronise un site local avec un site distant.

    Usage
    =====

        $(basename $0) [$OPT_CONF=""] [sql | files]

    Options
    =======

        $OPT_CONF=""
            Chemin vers le dossier (à l'intérieur du dossier "etc") contenant
            la configuration à utiliser (fichier config et hooks).

            Example : avec --conf="monsite", le fichier utilisé sera
            "etc/monsite/config" et les hooks utilisés seront ceux de "etc/monsite/hook"

            Par défaut : "", le fichier utilisé sera etc/config, les hooks seront cherchés dans "etc/hook"

        $OPT_SQL | $OPT_FILES
            Ne synchroniser que la base de données, ou que les fichiers.
            Par défaut : synchroniser la base de données et les fichiers.
EOF
}

# parse parameters
while [ $# -ne 0 ]
do
    case "$1" in
        $OPT_CONF=*)
            OPT_CONF_SIZE="${#OPT_CONF}"
            CONF="${1:$OPT_CONF_SIZE+1}"
            ;;
        $OPT_SQL)
            skip_files=1
            ;;
        $OPT_FILES)
            skip_sql=1
            ;;
        -h|--help|*)
            usage
            exit
            ;;
    esac
    shift
done

# chargement du fichier de config
if [ ! -f "etc/$CONF/config" ]; then
    echo "Erreur : fichier de configuration non trouvé"
    exit
else
    source "etc/$CONF/config"
fi

# activation compression, selon le type de source (gzip supporté globalement, 7z uniquement en remote_file ou local_file) a cause des ses limitations
src_file_extension="sql"
if [ $compress -gt 0 ];
then
    case "$src_type" in
        "remote_file" | "local_file")
            src_file_extension=$(echo "${src_file##*.}" | tr '[:upper:]' '[:lower:]');
            if [ "$src_file_extension" == "gz" ];
            then
                DO_GZIP="cat"
                DO_GUNZIP="gunzip -c"
            elif [ "$src_file_extension" == "7z" ];
            then
                DO_GZIP="cat"
                DO_GUNZIP="7zr e -so"
            else
                DO_GZIP="gzip -c "
                DO_GUNZIP="gunzip"
            fi
            ;;
        *)
            DO_GZIP="gzip"
            DO_GUNZIP="gunzip"
            ;;
    esac
else
    DO_GZIP="cat"
    DO_GUNZIP="cat"
fi

# gestion des infos de connexion à la base source
arg_src_hostname=""
arg_src_port=""
arg_src_dbuser=""
arg_src_dbpass=""
case "$src_type" in
    "remote_base" | "local_base")
        if [ -n "$src_dbhostname" ]; then
            arg_src_hostname=" -h '${src_dbhostname/\'/\'\\\'\'}' "
        fi
        if [ -n "$src_dbport" ]; then
            arg_src_port=" -P '${src_dbport/\'/\'\\\'\'}' "
        fi
        if [ -n "$src_dbuser" ]; then
            arg_src_dbuser=" -u '${src_dbuser/\'/\'\\\'\'}' "
        fi
        if [ -n "$src_dbpass" ]; then
            arg_src_dbpass=" -p'${src_dbpass/\'/\'\\\'\'}' "
        fi
        ;;
esac
arg_connexion_src="$arg_src_hostname$arg_src_port$arg_src_dbuser$arg_src_dbpass"

# gestion des infos de connexion à la base destination
arg_dst_hostname=""
arg_dst_port=""
arg_dst_dbuser=""
arg_dst_dbpass=""
if [ -n "$dst_dbhostname" ]; then
    if [ "$dst_dbhostname" == 'localhost' ]; then
        arg_dst_hostname=" -h '127.0.0.1' "
    else
        arg_dst_hostname=" -h '${dst_dbhostname/\'/\'\\\'\'}' "
    fi
fi
if [ -n "$dst_dbport" ]; then
    arg_dst_port=" -P '${dst_dbport/\'/\'\\\'\'}' "
fi
if [ -n "$dst_dbuser" ]; then
    arg_dst_dbuser=" -u '${dst_dbuser/\'/\'\\\'\'}' "
fi
if [ -n "$dst_dbpass" ]; then
    arg_dst_dbpass=" -p'${dst_dbpass/\'/\'\\\'\'}' "
fi
arg_connexion_dst="$arg_dst_hostname$arg_dst_port$arg_dst_dbuser$arg_dst_dbpass"

# echappement des variables : caracteres '.' et '/'
curdate=`date +%Y%m%d%H%M%S`
sqlfile_relative="tmp/$src_dbname$curdate.sql"
sqlfile="$sqlfile_relative"
sqlfile_tmp="tmp/$src_dbname-tmp.$src_file_extension"
sqlfile_backup="tmp/$src_dbname.sql"

echo "Lancement de la synchro" >> $logfile # RAZ du fichier log
echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile

# contrôles d'erreurs
if [ "$src_file_extension" == "gz" ];
then
    if [[ ! -x $(which gzip) || ! -x $(which gunzip)  ]];
    then
        echo "Vous avez besoin de gzip et gunzip en local (c'est standard normalement) : # apt-get install gzip" | tee -a $logfile
        exit
    fi
elif [ "$src_file_extension" == "7z" ]
then
    if [[ ! -x $(which 7zr) ]];
    then
        echo "Vous avez besoin de 7zr en local : # apt-get install p7zip" | tee -a $logfile
        exit
    fi
fi

#if [ "${#replace_src[@]}" != "${#replace_dst[@]}" ];
#then
    #echo "Incohérence dans les remplacements demandés, vérifiez les tableaux 'replace_src' et 'replace_dst' dans le fichier etc/config" | tee -a $logfile
    #exit
#fi

if [ "${#sync_src[@]}" != "${#sync_dst[@]}" ];
then
    echo "Incohérence dans les synchronisations demandées, vérifiez les tableaux 'sync_src' et 'sync_dst' dans le fichier etc/$CONF/config" | tee -a $logfile
    exit
fi

# copie la clé SSH pour ne pas avoir à saisir le mot de passe plusieurs fois
case "$src_type" in
    "remote_file")
        ssh-copy-id -o ControlMaster=yes -p $src_port $src_user@$src_server 2>/dev/null
        ;;
    "remote_base")
        ssh-copy-id -o ControlMaster=yes -p $src_port $src_user@$src_server 2>/dev/null
        ;;
esac

if [ "$skip_sql" == "0" ];
then
    # backup distant ou local
    RECUP_KO=1
    case "$src_type" in
        "remote_file")
            MSG="1/6 : récupération du fichier dump (distant)";
            printf "\r`tput el`%s" "$MSG" | tee -a $logfile
            ssh -p $src_port $src_user@$src_server "$DO_GZIP $src_file" > $sqlfile_tmp && \
                echo "DROP DATABASE IF EXISTS \`$dst_dbname\`; CREATE DATABASE \`$dst_dbname\`; USE \`$dst_dbname\`; " > $sqlfile && \
                $DO_GUNZIP $sqlfile_tmp 2>/dev/null \
                >> $sqlfile && rm -f $sqlfile_tmp
            RECUP_KO=$?
            ;;
        "local_file")
            MSG="1/6 : récupération du fichier dump (local : $src_file)";
            printf "\r`tput el`%s" "$MSG" | tee -a $logfile
            echo "DROP DATABASE IF EXISTS \`$dst_dbname\`; CREATE DATABASE \`$dst_dbname\`; USE \`$dst_dbname\`; " > $sqlfile_tmp && \
                $DO_GUNZIP $src_file 2>/dev/null \
                >> $sqlfile_tmp && mv -f $sqlfile_tmp $sqlfile
            RECUP_KO=$?
            ;;
        "remote_base")
            MSG="1/6 : dump de la base (distante)";
            printf "\r`tput el`%s" "$MSG" | tee -a $logfile
            echo "DROP DATABASE IF EXISTS \`$dst_dbname\`; CREATE DATABASE \`$dst_dbname\`; USE \`$dst_dbname\`; " > $sqlfile_tmp && \
                ssh -p $src_port $src_user@$src_server "($src_path_to_mysqldump --opt --no-data --no-create-db $sql_options_structure $arg_connexion_src $src_dbname && $src_path_to_mysqldump --opt --insert-ignore --no-create-db --no-create-info --insert-ignore $sql_options $sql_ignores $arg_connexion_src $src_dbname) | $DO_GZIP" | $DO_GUNZIP \
                >> $sqlfile_tmp && mv -f $sqlfile_tmp $sqlfile
            RECUP_KO=$?
            ;;
        "local_base")
            MSG="1/6 : dump de la base (locale)";
            printf "\r`tput el`%s" "$MSG" | tee -a $logfile
            echo "DROP DATABASE IF EXISTS \`$dst_dbname\`; CREATE DATABASE \`$dst_dbname\`; USE \`$dst_dbname\`; " > $sqlfile_tmp && \
                (sh -c "$dst_path_to_mysqldump --opt --no-data --no-create-db $sql_options_structure $arg_connexion_src $src_dbname && $dst_path_to_mysqldump --opt --insert-ignore --no-create-db --no-create-info $sql_options $sql_ignores $arg_connexion_src $src_dbname") \
                >> $sqlfile_tmp && mv -f $sqlfile_tmp $sqlfile
            RECUP_KO=$?
            ;;
    esac
    if [ $RECUP_KO -gt 0 ];
    then
        let COL=70-${#MSG} && \
        printf "%${COL}s\n" "KO" | tee -a $logfile
        exit
    else
        let COL=70-${#MSG} && \
        printf "%${COL}s\n" "OK" | tee -a $logfile
    fi
else
    MSG="1/6 : récupération du fichier dump (distant)";
    printf "\r`tput el`%s" "$MSG" | tee -a $logfile
    let COL=70-${#MSG} && \
    printf "%${COL}s\n" ".." | tee -a $logfile
fi

# remplacement des URL et chemins (même sérialisés)
MSG1="2/6 : remplacement de";
MSG2="${#replace_src[@]}";
MSG3="URL et chemins                          "
if [ "$skip_sql" == "0" ];
then
    for k in "${!replace_src[@]}"
    do
        replace_src_current_value=${replace_src["$k"]}
        replace_dst_current_value=${replace_dst["$k"]}
        MSG4="`expr 1 + \"$k\"`"
        MSG5=": \"${replace_src_current_value}\" => \"${replace_dst_current_value}\" "
        printf "\r`tput el`"                            # affichage uniquement
        echo >> $logfile                                # log uniquement
        echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile    # log uniquement
        printf "$MSG1 %3d $MSG3 %3d $MSG5" "$MSG2" "$MSG4" | tee -a $logfile
        $dst_path_to_php $dst_path_to_resilient_replace -i $resilient_replace_options "${replace_src_current_value}" "$replace_dst_current_value" $sqlfile_relative
    done
    printf "\r`tput el`" # affichage uniquement
    echo >> $logfile     # log uniquement
    printf "$MSG1 %3d $MSG3  OK" "$MSG2" | tee -a $logfile
    echo | tee -a $logfile
    echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
else
    printf "$MSG1 %3d $MSG3  .." "$MSG2" | tee -a $logfile
    echo | tee -a $logfile
fi

# adaptation spécifiques
MSG="3/6 : adaptations avant import (fichiers etc/$CONF/hook/before/*.sh)";
# applique les fichiers dans hook
echo -n "$MSG" | tee -a $logfile

if [ "$skip_sql" == "0" ];
then
    # teste s'il y a des fichiers .sh
    shopt -q nullglob || resetnullglob=1; shopt -s nullglob;
    files=(etc/$CONF/hook/before/*.sh);
    [ "$resetnullglob" ] && shopt -u nullglob
    # s'il y a des fichiers .sh
    if [ ${#files[@]} -gt 0 ];
    then
        echo | tee -a $logfile
        for fich in etc/$CONF/hook/before/*.sh;
        do
            echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
            source $fich;
        done
    else
        let COL=70-${#MSG} && \
        printf "%${COL}s\n" ".." | tee -a $logfile
    fi
    echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
else
    let COL=70-${#MSG} && \
    printf "%${COL}s\n" ".." | tee -a $logfile
fi

# importe la BD modifiee
MSG="4/6 : import de la base de donnees"
echo -n "$MSG" | tee -a $logfile
if [ "$skip_sql" == "0" ];
then
    cat $sqlfile | \
        eval "$dst_path_to_mysql $arg_connexion_dst --show-warnings" >> $logfile && \
        mv -f $sqlfile $sqlfile_backup && \
        let COL=70-${#MSG} && \
        printf "%${COL}s\n" "OK" | tee -a $logfile
    echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
else
    let COL=70-${#MSG} && \
    printf "%${COL}s\n" ".." | tee -a $logfile
fi

MSG1="5/6 : synchronisation de";
MSG2="${#sync_src[@]}";
MSG3="dossiers                             "
if [ "$skip_files" == "0" ];
then
    lftp_pass_escaped="$(printf "%q" "$lftp_pass")"
    for k in "${!sync_src[@]}"
    do
        sync_src_current_value="${sync_src[$k]}"
        sync_dst_current_value="${sync_dst[$k]}"
        # ajoute le slash final s'il a été oublié !
        sync_src_current_value="${sync_src_current_value/%\//}/"
        sync_dst_current_value="${sync_dst_current_value/%\//}/"
        MSG4="`expr 1 + $k`"
        MSG5=": \"${sync_src_current_value}\" => \"${sync_dst_current_value}\" "
        printf "\r`tput el`"                            # affichage uniquement
        echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile    # log uniquement
        printf "$MSG1 %3d $MSG3 %3d $MSG5" "$MSG2" "$MSG4" | tee -a $logfile
        if [ "$transport_type" == "rsync" ]; then
            $dst_path_to_rsync $rsync_options -e "ssh -p $src_port" $src_user@$src_server:$sync_src_current_value $sync_dst_current_value >> $logfile 2>&1
        fi
        if [ "$transport_type" == "lftp" ]; then
            bookmark_content="ftp://$src_user:$lftp_pass_escaped@$src_server:$lftp_src_port/"
            # do not put password in bookmark_name even if it's a hash, as it's visible in command line
            bookmark_name="$(echo -n "ftp://$src_user@$src_server:$lftp_src_port/" | md5sum - | cut -d' ' -f 1)"
            bookmarks_file="$HOME/.local/share/lftp/bookmarks"
            mkdir -p $HOME/.local/share/lftp
            # add bookmark
            touch $bookmarks_file && grep -q -F "$bookmark_name" $bookmarks_file || echo -e "$bookmark_name\t$bookmark_content" >> $bookmarks_file && chmod 600 $bookmarks_file
            $dst_path_to_lftp -e "open $bookmark_name; $lftp_connect_options mirror $lftp_mirror_command_options ${exclude_dirs/--exclude/-x} $sync_src_current_value $sync_dst_current_value; quit" >> $logfile 2>&1
            # remove bookmark
            sed -i "/^$bookmark_name/d" $bookmarks_file
        fi
        # TODO: display progress indicator, using for example "lsof -ad3-999 -c rsync | grep -v '^COMMAND \| unix .* socket$'"
    done
    printf "\r`tput el`$MSG1 %3d $MSG3  OK" "$MSG2" | tee -a $logfile
    echo | tee -a $logfile
    echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
else
    printf "\r`tput el`$MSG1 %3d $MSG3  .." "$MSG2" | tee -a $logfile
    echo | tee -a $logfile
fi

MSG="6/6 : adaptations apres import (fichiers etc/$CONF/hook/after/*.sh)";
# applique les fichiers dans hook
echo -n "$MSG" | tee -a $logfile
if [ "$skip_files" == "0" ];
then
    # teste s'il y a des fichiers .sh
    shopt -q nullglob || resetnullglob=1; shopt -s nullglob;
    files=(etc/$CONF/hook/after/*.sh);
    [ "$resetnullglob" ] && shopt -u nullglob
    # s'il y a des fichiers .sh
    if [ ${#files[@]} -gt 0 ];
    then
        echo | tee -a $logfile
        for fich in etc/$CONF/hook/after/*.sh;
        do
            echo `date "+%Y-%m-%d %H:%M:%S"` >> $logfile
            source $fich;
        done
    else
        let COL=70-${#MSG} && \
        printf "%${COL}s\n" ".." | tee -a $logfile
    fi
else
    let COL=70-${#MSG} && \
    printf "%${COL}s\n" ".." | tee -a $logfile
fi

echo "Fin de la synchro" >> $logfile

popd >/dev/null


# TODO: chercher remplacer dans les fichiers / afficher les fichiers qui matchent ?
# find . -iname '*.php' -or -iname '*.tpl' -or -iname '*.twig' -or -iname '*.inc' -or -iname '*.ini' -or -iname '*.conf' -or -iname '*.ts' -exec grep "" {} \;

# vim: filetype=sh
